/******************************************************************************
**
**  This file is part of Met.3D -- a research environment for the
**  three-dimensional visual exploration of numerical ensemble weather
**  prediction data.
**
**  Copyright 2020-2021 Christoph Neuhauser
**  Copyright 2020      Michael Kern
**
**  Computer Graphics and Visualization Group
**  Technische Universitaet Muenchen, Garching, Germany
**
**  Met.3D is free software: you can redistribute it and/or modify
**  it under the terms of the GNU General Public License as published by
**  the Free Software Foundation, either version 3 of the License, or
**  (at your option) any later version.
**
**  Met.3D is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**  GNU General Public License for more details.
**
**  You should have received a copy of the GNU General Public License
**  along with Met.3D.  If not, see <http://www.gnu.org/licenses/>.
**
******************************************************************************/
//uniform float minColorIntensity;

///////////////////////////////////////////
// RGB <-> HSV color space mapping

/*layout (std430, binding = 8) buffer VarColorArray {
    vec4 colorVars[];
};*/

vec3 rgbToHSV(in vec3 color) {
    float minValue = min(color.r, min(color.g, color.b));
    float maxValue = max(color.r, max(color.g, color.b));

    float C = maxValue - minValue;

    // 1) Compute hue H
    float H = 0;
    if (maxValue == color.r) {
        H = mod((color.g - color.b) / C, 6.0);
    } else if (maxValue == color.g) {
        H = (color.b - color.r) / C + 2;
    } else if (maxValue == color.b) {
        H = (color.r - color.g) / C + 4;
    } else {
        H = 0;
    }

    H *= 60; // hue is in degree

    // 2) Compute the value V
    float V = maxValue;

    // 3) Compute saturation S
    float S = 0;
    if (V == 0) {
        S = 0;
    } else {
        S = C / V;
        //        S = C / (1 - abs(maxValue + minValue - 1));
    }

    return vec3(H, S, V);
}

// https://en.wikipedia.org/wiki/HSL_and_HSV
// https://de.wikipedia.org/wiki/HSV-Farbraum

vec3 hsvToRGB(in vec3 color) {
    const float H = color.r;
    const float S = color.g;
    const float V = color.b;

    float h = H / 60.0;

    int hi = int(floor(h));
    float f = (h - float(hi));

    float p = V * (1.0 - S);
    float q = V * (1.0 - S * f);
    float t = V * (1.0 - S * (1.0 - f));

    if (hi == 1) {
        return vec3(q, V, p);
    } else if (hi == 2) {
        return vec3(p, V, t);
    }
    else if (hi == 3) {
        return vec3(p, q, V);
    } else if (hi == 4) {
        return vec3(t, p, V);
    } else if (hi == 5) {
        return vec3(V, p, q);
    } else {
        return vec3(V, t, p);
    }
}


///////////////////////////////////////////
// Variable color mapping

vec4 mapColor(in float value, uint index) {
    if (index == 0) {
        return mix(vec4(vec3(253,219,199)/ 255.0, 1), vec4(vec3(178,24,43)/ 255.0, 1), value);
    } else if (index == 1) {
        return mix(vec4(vec3(209,229,240)/ 255.0, 1), vec4(vec3(33,102,172)/ 255.0, 1), value);
    } else if (index == 2) {
        return mix(vec4(vec3(217,240,211)/ 255.0, 1), vec4(vec3(27,120,55)/ 255.0, 1), value);
    } else if (index == 3) {
        return mix(vec4(vec3(216,218,235) / 255.0, 1), vec4(vec3(84,39,136) / 255.0, 1), value);
    } else if (index == 5) {
        return mix(vec4(vec3(254,224,182)/ 255.0, 1), vec4(vec3(179,88,6)/ 255.0, 1), value);
    } else if (index == 6) {
        return mix(vec4(vec3(199,234,229)/ 255.0, 1), vec4(vec3(1,102,94)/ 255.0, 1), value);
    } else if (index == 4) {
        return mix(vec4(vec3(253,224,239)/ 255.0, 1), vec4(vec3(197,27,125)/ 255.0, 1), value);
    }

    return vec4(0);
}

/*vec4 determineVariableColor(in int varID) {
    vec4 surfaceColor = vec4(0.2, 0.2, 0.2, 1);

    if (varID >= maxNumVariables || varID < 0) {
        surfaceColor = vec4(0.4, 0.4, 0.4, 1);
    }
    else {
        surfaceColor = colorVars[varID];
    }

//    if (varID == 0) { surfaceColor = vec4(vec3(228,26,28)/ 255.0, 1); } // red
//    else if (varID == 1) { surfaceColor = vec4(vec3(55,126,184)/ 255.0, 1); } // blue
//    else if (varID == 2) { surfaceColor = vec4(vec3(5,139,69)/ 255.0, 1); } // green
//    else if (varID == 3) { surfaceColor = vec4(vec3(129,15,124)/ 255.0, 1); } // lila / purple
//    else if (varID == 4) { surfaceColor = vec4(vec3(217,72,1)/ 255.0, 1); } // orange
//    else if (varID == 5) { surfaceColor = vec4(vec3(231,41,138)/ 255.0, 1); } // pink
//    else { surfaceColor = vec4(0.4, 0.4, 0.4, 1); }

    surfaceColor.rgb = sRGBToLinearRGB(surfaceColor.rgb);

    return surfaceColor;
}*/


vec4 determineColor(in uint varID, in float variableValue) {
    // Determine variable color
    /*vec4 surfaceColor = determineVariableColor(varID);

    if (varID >= 0)
    {
        vec3 hsvCol = rgbToHSV(surfaceColor.rgb);
        float rate = variableValue;
        hsvCol.g = hsvCol.g * (minColorIntensity + (1.0 - minColorIntensity) * rate);
        surfaceColor.rgb = hsvCol.rgb;
        surfaceColor.rgb = hsvToRGB(surfaceColor.rgb);
    }*/
    if (varID >= maxNumVariables || varID < 0) {
        return vec4(0.4, 0.4, 0.4, 1);
    }

    //vec4 surfaceColor = transferFunction(variableValue * (1.0 - minColorIntensity) + minColorIntensity, varID);
    vec4 surfaceColor = transferFunction(variableValue, varID);
    return surfaceColor;
}


vec4 determineColorLinearInterpolate(
        in uint varID, in float variableValue, in float variableNextValue, in float interpolant) {
    // Determine variable color
    /*vec4 surfaceColor = determineVariableColor(varID);

#ifndef DIRECT_COLOR_MAPPING
    vec3 hsvCol = rgbToHSV(surfaceColor.rgb);
    float curMapping = variableValue;
    float nextMapping = variableNextValue;
    float rate = mix(curMapping, nextMapping, interpolant);
    //
    float ambientFactor = 0.1;
    hsvCol.g = hsvCol.g * (minColorIntensity + (1.0 - minColorIntensity) * rate);
    surfaceColor.rgb = hsvCol.rgb;
    surfaceColor.rgb = hsvToRGB(surfaceColor.rgb);

    //surfaceColor = mapColor(variableValue, varID);
    //vec4 surfaceColor2 = mapColor(variableNextValue, varID);
    //surfaceColor = mix(surfaceColor, surfaceColor2, fragElementInterpolant);
#endif
    */

    if (varID >= maxNumVariables || varID < 0) {
        return vec4(0.4, 0.4, 0.4, 1);
    }

    float value = mix(variableValue, variableNextValue, interpolant);
    vec4 surfaceColor = transferFunction(value, varID);
    return surfaceColor;
}

//#define USE_ARTIFICIAL_TEST_DATA
#ifdef USE_ARTIFICIAL_TEST_DATA
vec4 determineColorArtificialData(in int fragmentLineID, in uint varID, in uint actualVarID, in vec4 surfaceColor) {
#ifdef GREAT_CIRCLES_MODE
    if (varID == 3) {
        //varID = 5;
        //actualVarID = sampleActualVarID(varID);
    } else if (varID == 5) {
        //varID = 3;
        //actualVarID = sampleActualVarID(varID);
    }
#endif

    int numTrajsArray = 20;
    //int numTrajsArray = 50;
    int numVarsArray = 6;
    bool scenario2 = false;
    bool scenario3 = false; // For s10
    float values[] = {
    // s1 - T1 v1
    //1.0,1.0,1.0,0.5971498294499488,1.0,1.0,1.0,1.0,1.0,0.5452547521773505,1.0,1.0,1.0,1.0,1.0,0.6952803419119562,1.0,1.0,1.0,1.0,1.0,0.5217308860002629,1.0,1.0,1.0,1.0,1.0,0.6607646012920068,1.0,1.0,1.0,1.0,1.0,0.6097066750737756,1.0,1.0,1.0,1.0,1.0,0.517399677432412,1.0,1.0,1.0,1.0,1.0,0.6522307199568261,1.0,1.0,0.007499131688396977,0.08672913673247717,0.013971084714923789,0.0849038378285028,0.16537042493440762,0.02476039222992912,1.0,1.0,1.0,0.5669716893821044,1.0,1.0,1.0,1.0,1.0,0.6882299667216768,1.0,1.0,1.0,1.0,1.0,0.7843126827371018,1.0,1.0,1.0,1.0,1.0,0.6731308845852496,1.0,1.0,1.0,1.0,1.0,0.619004142395234,1.0,1.0,1.0,1.0,1.0,0.7928765316778761,1.0,1.0,1.0,1.0,1.0,0.5139748041853269,1.0,1.0,1.0,1.0,1.0,0.7575405377146038,1.0,1.0,1.0,1.0,1.0,0.5868827858995029,1.0,1.0,1.0,1.0,1.0,0.5432765250072312,1.0,1.0,1.0,1.0,1.0,0.5353376714235105,1.0,1.0,
    // s1 - T1 v2
    0.06476655296663247,0.030169834784900387,0.13018689460797075,0.30717640086133785,0.07313778338251711,0.011599784954941362,1.0,1.0,0.601487146637884,0.7433645683662385,1.0,1.0,1.0,1.0,0.5139710847149238,0.7424519189142514,1.0,1.0,1.0,1.0,0.6653704249344076,0.7223238964607014,1.0,1.0,1.0,1.0,0.6254866444811178,0.7577102948617499,1.0,1.0,1.0,1.0,1.0,0.619004142395234,1.0,1.0,1.0,1.0,1.0,0.7928765316778761,1.0,1.0,1.0,1.0,1.0,0.5139748041853269,1.0,1.0,0.17169369180973593,0.05792185726633525,0.028851016671487508,0.06169636482038687,0.16322527182400628,0.0361452759847875,1.0,1.0,1.0,0.6744800490987399,1.0,1.0,1.0,1.0,1.0,0.6916740406778552,1.0,1.0,1.0,1.0,1.0,0.6117192628177194,1.0,1.0,1.0,1.0,1.0,0.6643233397128674,1.0,1.0,1.0,1.0,1.0,0.5188366924919969,1.0,1.0,1.0,1.0,1.0,0.5178803509898698,1.0,1.0,1.0,1.0,1.0,0.561787613845798,1.0,1.0,1.0,1.0,1.0,0.7041199919545358,1.0,1.0,1.0,1.0,1.0,0.6282776917008208,1.0,1.0,1.0,1.0,1.0,0.5942441511130374,1.0,1.0,1.0,1.0,1.0,0.6756685590522916,1.0,1.0,
    // s2 - T3
    //0.09714982944994871,0.045254752177350574,0.19528034191195612,0.021730886000262826,0.16076460129200676,0.10970667507377566,0.017399677432412042,0.15223071995682608,0.011248697532595464,0.13009370509871576,0.02095662707238568,0.027213904003159515,0.12735575674275418,0.2480556374016114,0.03714058834489368,0.06697168938210436,0.18822996672167677,0.2843126827371017,0.17313088458524958,0.11900414239523405,0.29287653167787603,0.013974804185326883,0.25754053771460383,0.08688278589950288,0.04327652500723126,0.035337671423510505,0.09254454723058031,0.2448379077360094,0.05421791397718124,0.17448004909873988,0.1916740406778552,0.11171926281771936,0.16432333971286733,0.018836692491996942,0.017880350989869797,0.06178761384579796,0.20411999195453576,0.12827769170082085,0.09424415111303745,0.17566855905229162,0.1359553129112326,0.0899300990591047,0.23831384445674733,0.20969833011887137,0.07322895321664587,0.1723271130776013,0.15755895114343543,0.26254124867202866,0.21883358683176526,0.08638132946705596,0.2940524542477746,0.035419733476488635,0.12543684653556816,0.2271422788695748,0.04559536039815143,0.14668893014274167,0.011762177114231298,0.20046475696031854,0.22937125986384393,0.1719077820832152,0.2627495025696194,0.7783109631315055,0.6912410662602826,0.6889362190215874,0.2328304410949349,0.9402984042608848,0.39861918789332684,0.6853786596282447,0.7337305431768377,0.5923390572599532,0.12341915889634639,0.9536465976945041,0.038802066605605263,0.07428445010907428,0.11728491093996812,0.8161162602400278,0.7098879818288075,0.26501514793245373,0.2457839513507224,0.25919534090955454,0.08352631935416914,0.871754233066325,0.7915462407927982,0.04527627173733268,0.24639137336390715,0.7454888191024069,0.6525493238597075,0.5837893002250656,0.21326824474127837,0.9380987314271956,0.1546474299212335,0.1852778248227383,0.2028600247348504,0.9799066020115904,0.7749026368268953,0.2393619363589698,0.11771367206738059,0.11969364969608189,0.03106112811309728,0.8124495643237376,0.6417526370892329,0.04869095633162922,0.6210302415561068,6.998457040698902e-05,0.8202928736045193,0.10765026599984372,0.3228137975576958,0.04456514559926743,0.7389558184214806,0.10924903185848474,0.969787385296923,0.23979683774798013,0.21717693231123314,0.030656285024450534,0.7059027566868721,0.24865661343646814,0.8046191442090497,0.2584772185126375,0.3086344851764229,0.008112747426650557,
    // s7 - T3
    //0.06476655296663247,0.030169834784900387,0.13018689460797075,0.014487257333508552,0.8731377833825171,0.011599784954941362,0.10148714663788405,0.007499131688396977,0.08672913673247717,0.013971084714923789,0.8849038378285028,0.16537042493440762,0.02476039222992912,0.04464779292140291,0.12548664448111788,0.18954178849140113,0.8793360949301561,0.19525102111858403,0.009316536123551256,0.17169369180973593,0.05792185726633525,0.028851016671487508,0.8616963648203869,0.16322527182400628,0.0361452759847875,0.11632003273249325,0.12778269378523682,0.07447950854514625,0.8125577949946646,0.011920233993246532,0.8721599892727143,0.08551846113388058,0.7171123727015277,0.7599533993727364,0.3397988867459143,0.5148847420517342,0.9500549982293716,0.14588905788784354,0.7960349694985165,0.5836245643570455,0.23039690693210096,0.4078414514094876,0.9058283464851252,0.1146051880554768,0.6627495025696194,0.6188739754210036,0.2912410662602826,0.5889362190215874,0.0,0.0,0.0,0.0,0.4,0.0,0.7138382128376597,0.07715828848934217,0.6045125856111176,0.5336096757813089,0.2117908838662621,0.4258680444037369,0.04952296673938286,0.07818994062664542,0.1742843948252599,0.016116260240027724,0.0898374801898662,0.10988798182880749,0.1766767652883025,0.16385596756714826,0.17279689393970304,0.05568421290277943,0.08305930344233972,0.07175423306632496,0.1768385654396434,0.19154624079279825,0.03018418115822179,0.035243545698074065,0.046391373363907154,0.046667216736172225,0.09699254606827133,0.11782470074645113,0.05254932385970759,0.0008187206770127853,0.08378930022506559,0.07385071457894508,0.11326824474127839,0.19061958510501908,0.1380987314271956,0.10309828661415568,0.12351854988182553,0.13524001648990028,0.01079857864475804,0.17990660201159045,0.15599389814121456,0.17490263682689533,0.15957462423931323,0.07847578137825373,0.0797957664640546,0.020707418742064856,0.12685791313714181,0.012449564323737517,0.01346952316860497,0.041752637089232894,0.03246063755441948,0.06801073044646869,0.010515120778053388,4.665638027132602e-05,0.03025298645588559,0.020292873604519302,0.0727219844069142,0.00510017733322914,0.17486647547476394,0.12281379755769575,0.02971009706617829,0.05045155131141546,0.0694779092107403,0.07283268790565649,0.024568446152438986,0.169787385296923,0.19862054434094278,0.09319789183198675,
    // s8 - T2
    //0.06476655296663247,0.030169834784900387,0.13018689460797075,0.014487257333508552,0.10717640086133784,0.07313778338251711,0.701487146637884,0.8867291367324772,0.013971084714923789,0.018142602668773013,0.7653704249344077,0.02476039222992912,0.04464779292140291,0.12548664448111788,0.18954178849140113,0.11542058972349974,0.07933609493015603,0.19525102111858403,0.7716936918097359,0.8288510166714875,0.023558447615673675,0.06169636482038687,0.6361452759847874,0.11632003273249325,0.12778269378523682,0.07447950854514625,0.10954889314191157,0.012557794994664629,0.011920233993246532,0.04119174256386531,0.1360799946363572,0.08551846113388058,0.0628294340753583,0.11711237270152774,0.09063687527415508,0.05995339937273647,0.15887589630449825,0.13979888674591426,0.04881930214443058,0.11488474205173421,0.10503930076229029,0.1750274991146858,0.14588905788784354,0.057587552978037304,0.19603496949851643,0.023613155650992423,0.08362456435704545,0.15142818591304988,0.030396906932100953,0.09779262009516113,0.007841451409487532,0.13364317130687905,0.15291417324256262,0.1146051880554768,0.17509556236617765,0.06274950256961935,0.13905907325473185,0.1188739754210037,0.11597904085649845,0.09124106626028261,0.1679935561025083,0.1889362190215875,0.0948196674839289,0.1328304410949349,0.012133885519443943,0.14029840426088477,0.12942577090553375,0.19861918789332683,0.164384957321943,0.05691910641882985,0.07715828848934217,0.13373054317683764,0.004512585611117714,0.09233905725995317,0.03360967578130891,0.02341915889634638,0.011790883866262081,0.15364659769450417,0.025868044403736846,0.04952296673938286,0.07818994062664542,0.1742843948252599,0.016116260240027724,0.0898374801898662,0.10988798182880749,0.1766767652883025,0.16385596756714826,0.17279689393970304,0.05568421290277943,0.08305930344233972,0.07175423306632496,0.1768385654396434,0.19154624079279825,0.03018418115822179,0.035243545698074065,0.046391373363907154,0.046667216736172225,0.09699254606827133,0.11782470074645113,0.05254932385970759,0.0008187206770127853,0.08378930022506559,0.07385071457894508,0.11326824474127839,0.19061958510501908,0.1380987314271956,0.10309828661415568,0.12351854988182553,0.13524001648990028,0.01079857864475804,0.17990660201159045,0.15599389814121456,0.17490263682689533,0.15957462423931323,0.07847578137825373,0.0797957664640546,0.020707418742064856,0.12685791313714181,0.012449564323737517,0.01346952316860497,
    // T50 s1 - T1
    //0.7301698347849004,0.6217308860002628,0.6731377833825171,0.40148714663788404,0.7867291367324771,0.636285205337546,0.8653704249344076,0.6669716893821044,0.7895417884914011,0.379336094930156,0.7093165361235512,0.7158437145326705,0.028851016671487508,0.023558447615673675,0.06169636482038687,0.16322527182400628,0.0361452759847875,0.11632003273249325,0.7744795085451462,0.6188366924919969,0.6411917425638654,0.38551846113388055,0.8171123727015277,0.7199067987454729,0.15887589630449825,0.13979888674591426,0.04881930214443058,0.11488474205173421,0.10503930076229029,0.1750274991146858,0.7575875529780373,0.6354197334764886,0.7514281859130499,0.39779262009516114,0.833643171306879,0.8292103761109536,0.17509556236617765,0.06274950256961935,0.13905907325473185,0.1188739754210037,0.11597904085649845,0.09124106626028261,0.8889362190215875,0.7992456616424024,0.7402984042608848,0.4986191878933268,0.7569191064188299,0.8674610863536752,0.7923390572599531,0.6351287383445196,0.7536465976945042,0.3495229667393829,0.8742843948252599,0.7796749603797324,0.8766767652883025,0.8591953409095545,0.6830593034423398,0.4768385654396434,0.7301841811582217,0.6927827467278143,0.7969925460682713,0.6788239857895614,0.6837893002250656,0.4132682447412784,0.8380987314271956,0.847037099763651,0.710798578644758,0.8339908472118218,0.7595746242393132,0.3797957664640546,0.8268579131371419,0.6269390463372099,0.7324606375544195,0.6157726811670801,0.6302529864558856,0.3727219844069142,0.8748664754747639,0.6594201941323565,0.7694779092107403,0.6368526692286585,0.7986205443409429,0.3967669312832539,0.7204375233496336,0.7059027566868721,0.7322877221052863,0.8852956718624106,0.6293205077798181,0.30540849828443367,0.8957002485437946,0.8784787143631207,0.7733399583522358,0.8315813725206094,0.7558109782676354,0.344608334620637,0.8969852101181781,0.922431433914267,0.16366658866507466,0.14797460407514282,0.04534789800631698,0.10352774484870111,0.07111250867099164,0.005796030148273079,0.005587415084412895,0.05588370780980596,0.051834872653551314,0.13850438834002468,0.19130301526826757,0.0894455355533447,0.897607611640572,0.7093907656085598,0.6453691653461456,0.3408746726552446,0.8800616675768229,0.7917893705046153,0.13059560856820182,0.15992874896993203,0.01695569729007602,0.13211713004097883,0.1819554275103446,0.156460576819618,0.15002809196609168,0.09560654891880005,0.03570434366751472,0.15782708620405528,0.06650343997292199,0.16016471377933822,0.19433145779643168,0.07916769901388963,0.0802773635735403,0.1893594012929786,0.14495973312684304,0.0340007319943791,0.025407673459572868,0.030230140076297964,0.18097041914664788,0.16130039640643923,0.029234861748774835,0.16530209570507742,0.831453658547204,0.7645980131960337,0.6028485876312211,0.4299349339347661,0.8867249610114853,0.9486971711957617,0.7422084674656297,0.6878899958010657,0.7172874336331924,0.38380251055090875,0.8820034112631113,0.7832643945886935,0.8808593549084079,0.8753163253027993,0.7063649924871868,0.303740973581084,0.7366215774544397,0.9196681801968887,0.03446934244268978,0.09469858649239127,0.14503865408947558,0.11129512498044265,0.06519643020977282,0.10366974254060737,0.8568544950730951,0.7680888400751857,0.6553834140929563,0.4015427983584641,0.8519986285180033,0.7772993574309756,0.8011106261702443,0.8078193007644687,0.7066570875158342,0.48830022550770014,0.8753070963561187,0.7038369176470762,0.11190276129954298,0.18865340680269677,0.16799995667864118,0.027426887179370297,0.024324390876836133,0.08842361765500872,0.7481277516906539,0.8008416435929687,0.7794052865757534,0.44322397655763923,0.7285957995848474,0.9870179130665535,0.8905008257837973,0.7461782324972641,0.7664889338965896,0.3863043635995278,0.767823228867764,0.7274102273350775,0.7038965856104786,0.7321374305408106,0.6662995778283981,0.4024524568926911,0.8970166488268199,0.9886783834588296,0.7531128544687039,0.8336992290203677,0.6259111118611355,0.4822827632367218,0.7517218029587683,0.9676686034047085,0.8400834893093236,0.6172579537322839,0.6850634081591446,0.4876699418080326,0.860325718314278,0.9424914545488595,0.013324506974892292,0.17255499381076925,0.09075470419458498,0.06783035545692724,0.11061282369160702,0.18533385681424544,0.7258449599790657,0.6715308508384061,0.6322898183195222,0.3403536497537,0.7610010795758453,0.7159843338897433,0.7355799768425857,0.6054489321883745,0.6030692234910039,0.4102098256022507,0.7949521277035467,0.6425125380108365,0.7864355171568832,0.8503841799990668,0.7013371904310332,0.4964881080829594,0.86645730865289,0.8543907795540058,0.7695104360310464,0.6389455743452649,0.7481778396365856,0.33264930405527515,0.8682537963701513,0.8682173191634714,0.0563866564613259,0.04844258679849731,0.058611698516067096,0.09189058867894416,0.03150658796584114,0.08916492164674805,0.05264861339947782,0.19235730667252268,0.19452459958927526,0.1094146748237817,0.048889298788378714,0.19313335401175702,0.7713167834027974,0.7144879819837746,0.70055280127528,0.4009471279028625,0.7528337371603314,0.7598044681155703,0.7044988293940515,0.6698428699772419,0.705837909658622,0.43150873466253453,0.875818138713478,0.7304539016505398,0.7298926298084506,0.7929658349113589,0.7670579086467788,0.4254664248663853,0.8624437831424788,0.8095029138114069,0.8669875186874053,0.8479227364505941,0.7785659472811016,0.4386652270598558,0.7062321052579017,0.7442829905733945,0.020983294213739415,0.16716423995999422,0.11170544929918694,0.1255534217042337,0.1252452917865572,0.13613283521616412,0.0978588629719509,0.000662865425569592,0.15953951041417053,0.14965307404474115,0.10059421047249076,0.10703996284595418,0.7132100712444304,0.675658059438807,0.6531116444390798,0.3410435054164173,0.8951470188205541,0.753024190892994,0.8367393125404703,0.785092204733475,0.6154943639035602,0.35078805633117904,0.7608834275918465,0.6049876853299757,
    // s11 - T2
    //0.7301698347849004,0.21448725733350857,0.4731377833825171,0.20148714663788403,0.8867291367324772,0.318142602668773,0.9653704249344076,0.02476039222992912,0.04464779292140291,0.9895417884914011,0.11542058972349974,0.07933609493015603,0.7093165361235512,0.25792185726633526,0.4235584476156737,0.26322527182400624,0.9163200327324933,0.3744795085451462,0.8125577949946646,0.011920233993246532,0.04119174256386531,0.8855184611338806,0.0628294340753583,0.11711237270152774,0.8599533993727365,0.15887589630449825,0.13979888674591426,0.9148847420517342,0.10503930076229029,0.1750274991146858,0.14588905788784354,0.057587552978037304,0.19603496949851643,0.8836245643570455,0.15142818591304988,0.030396906932100953,0.09779262009516113,0.007841451409487532,0.13364317130687905,0.9146051880554769,0.17509556236617765,0.06274950256961935,0.13905907325473185,0.1188739754210037,0.11597904085649845,0.9679935561025083,0.1889362190215875,0.0948196674839289,0.7121338855194439,0.32942577090553377,0.5643849573219429,0.17715828848934217,0.8045125856111177,0.3336096757813089,0.02341915889634638,0.011790883866262081,0.15364659769450417,0.025868044403736846,0.04952296673938286,0.07818994062664542,0.1742843948252599,0.016116260240027724,0.0898374801898662,0.10988798182880749,0.1766767652883025,0.16385596756714826,0.17279689393970304,0.05568421290277943,0.08305930344233972,0.07175423306632496,0.1768385654396434,0.19154624079279825,0.03018418115822179,0.035243545698074065,0.046391373363907154,0.046667216736172225,0.09699254606827133,0.11782470074645113,0.05254932385970759,0.0008187206770127853,0.08378930022506559,0.07385071457894508,0.11326824474127839,0.19061958510501908,0.1380987314271956,0.10309828661415568,0.12351854988182553,0.13524001648990028,0.01079857864475804,0.17990660201159045,0.15599389814121456,0.17490263682689533,0.15957462423931323,0.07847578137825373,0.0797957664640546,0.020707418742064856,0.12685791313714181,0.012449564323737517,0.01346952316860497,0.041752637089232894,0.03246063755441948,0.06801073044646869,0.010515120778053388,4.665638027132602e-05,0.03025298645588559,0.020292873604519302,0.0727219844069142,0.00510017733322914,0.17486647547476394,0.12281379755769575,0.02971009706617829,0.05045155131141546,0.0694779092107403,0.07283268790565649,0.024568446152438986,0.169787385296923,0.19862054434094278,0.09319789183198675,0.09676693128325389,0.017176932311233118,
    // s14 - T1
    //0.23016983478490038,0.21448725733350857,0.13656889169125858,0.10148714663788405,0.8867291367324772,0.013971084714923789,0.7849038378285028,0.4247603922299291,0.5254866444811178,0.8154205897234997,0.995251021118584,0.37169369180973594,0.7288510166714874,0.4616963648203869,0.43614527598478753,0.8277826937852368,0.9095488931419116,0.21192023399324655,0.8360799946363572,0.4628294340753583,0.49063687527415506,0.8588758963044982,0.8488193021444306,0.3050393007622903,0.8458890578878435,0.5960349694985164,0.48362456435704543,0.7303969069321009,0.8078414514094876,0.35291417324256263,0.1146051880554768,0.17509556236617765,0.06274950256961935,0.9188739754210037,0.11597904085649845,0.09124106626028261,0.1679935561025083,0.1889362190215875,0.0948196674839289,0.812133885519444,0.14029840426088477,0.12942577090553375,0.19861918789332683,0.164384957321943,0.05691910641882985,0.9337305431768377,0.004512585611117714,0.09233905725995317,0.03360967578130891,0.02341915889634638,0.011790883866262081,0.8258680444037368,0.04952296673938286,0.07818994062664542,0.1742843948252599,0.016116260240027724,0.0898374801898662,0.9766767652883025,0.16385596756714826,0.17279689393970304,0.05568421290277943,0.08305930344233972,0.07175423306632496,0.1768385654396434,0.19154624079279825,0.03018418115822179,0.035243545698074065,0.046391373363907154,0.046667216736172225,0.09699254606827133,0.11782470074645113,0.05254932385970759,0.0008187206770127853,0.08378930022506559,0.07385071457894508,0.11326824474127839,0.19061958510501908,0.1380987314271956,0.10309828661415568,0.12351854988182553,0.13524001648990028,0.01079857864475804,0.17990660201159045,0.15599389814121456,0.17490263682689533,0.15957462423931323,0.07847578137825373,0.0797957664640546,0.020707418742064856,0.12685791313714181,0.012449564323737517,0.01346952316860497,0.041752637089232894,0.03246063755441948,0.06801073044646869,0.010515120778053388,4.665638027132602e-05,0.03025298645588559,0.020292873604519302,0.0727219844069142,0.00510017733322914,0.17486647547476394,0.12281379755769575,0.02971009706617829,0.05045155131141546,0.0694779092107403,0.07283268790565649,0.024568446152438986,0.169787385296923,0.19862054434094278,0.09319789183198675,0.09676693128325389,0.017176932311233118,0.020437523349633693,0.06852716764860037,0.05295137834343602,0.16577107562431212,0.0322877221052863,0.00461914420904963,0.19019711457494043,
    // T50 s1 - T2
    //0.3452547521773506,0.5144872573335085,0.10717640086133784,0.21159978495494136,0.807499131688397,0.08672913673247717,0.32721390400315953,0.6653704249344076,0.02476039222992912,0.32548664448111786,0.9154205897234997,0.07933609493015603,0.31397480418532686,0.5579218572663353,0.028851016671487508,0.2616963648203869,0.8361452759847875,0.11632003273249325,0.41171926281771937,0.5125577949946646,0.011920233993246532,0.3360799946363572,0.8628294340753584,0.11711237270152774,0.3899300990591047,0.6397988867459142,0.04881930214443058,0.3050393007622903,0.9458890578878435,0.057587552978037304,0.8236131556509925,0.4271422788695748,0.8977926200951611,0.33364317130687904,0.5146051880554768,0.6313747512848097,0.4783109631315055,0.5912410662602826,0.1679935561025083,0.2948196674839289,0.812133885519444,0.14029840426088477,0.5979287818399902,0.5569191064188298,0.07715828848934217,0.20451258561111774,0.833609675781309,0.02341915889634638,0.5304698965417562,0.5495229667393828,0.07818994062664542,0.21611626024002772,0.9098879818288075,0.1766767652883025,0.672796893939703,0.05568421290277943,0.37175423306632494,0.8301841811582218,0.035243545698074065,0.34666721673617223,0.4767370511196767,0.5008187206770128,0.08378930022506559,0.3132682447412784,0.9380987314271956,0.10309828661415568,0.6352400164899002,0.01079857864475804,0.45599389814121455,0.8784757813782538,0.0797957664640546,0.42685791313714183,0.32020428475290746,0.5324606375544195,0.06801073044646869,0.20004665638027133,0.8202928736045193,0.0727219844069142,0.5622997132121459,0.5297100970661783,0.05045155131141546,0.2728326879056565,0.969787385296923,0.19862054434094278,0.4451503969248808,0.5204375233496337,0.06852716764860037,0.3657710756243121,0.8046191442090497,0.19019711457494043,0.3439807616697272,0.5054084982844337,0.1056218881876613,0.3726650060579338,0.8522230394458724,0.07333995835223577,0.5315813725206093,0.6558109782676353,0.06593299900955248,0.362302249354719,0.9705257597493321,0.16121571695713352,0.5219619061127142,0.6035277448487011,0.07111250867099164,0.20558741508441292,0.8518348726535514,0.13850438834002468,0.434168303330017,0.6976076116405721,0.19100012626426666,0.2440924645992475,0.8393412326838635,0.04087467265524461,0.5700925013652343,0.5958946852523076,0.13059560856820182,0.21695569729007602,0.9819554275103446,0.156460576819618,0.44340982337820006,0.6578270862040553,0.06650343997292199,0.3943314577964317,0.8802773635735404,0.1893594012929786,0.35100109799156864,0.530230140076298,0.18097041914664788,0.22923486174877483,0.9960611886894061,0.131453658547204,0.4645980131960337,0.5028485876312211,0.19417803544755288,0.30531620941981114,0.8867618873514972,0.17434858559788083,0.8422084674656298,0.28788999580106567,0.9172874336331923,0.28380251055090877,0.5820034112631113,0.6458160986471734,0.5712890323626119,0.6835442168685328,0.10032978822404631,0.3047013171174333,0.8880249824769887,0.036621577454439745,0.5397511351476665,0.5946985864923913,0.14503865408947558,0.26519643020977285,0.9110883749760494,0.15685449507309512,0.4680888400751857,0.5553834140929563,0.15445221975109769,0.31234587733129526,0.9824976072659624,0.08864967871548778,0.9011106261702444,0.40781930076446876,0.9066570875158342,0.38830022550770016,0.5753070963561187,0.6259592294117691,0.9886534068026968,0.24114033076905544,0.8884236176550088,0.24812775169065399,0.5338944290619791,0.6897026432878767,0.5148359648364589,0.5285957995848475,0.1765665667314151,0.24391756616038396,0.8796513749434545,0.09745215499817604,0.5497334008448842,0.5863043635995278,0.10312101156087182,0.23914893322678624,0.9444301670282371,0.0038965856104786313,0.4321374305408106,0.5662995778283981,0.1247854147783728,0.21285815851815038,0.9576726112195162,0.19433919172941483,0.3796692817030559,0.6557994860135784,0.05408921950426182,0.28445083625553225,0.9637957959562563,0.05172180295876834,0.5757514525535314,0.6400834893093236,0.01789244156936154,0.33764111426970966,0.8144828189446381,0.18766994180803256,0.6603257183142779,0.016748505246903612,0.3133245069748923,0.8678303554569273,0.11061282369160702,0.35357194933549085,0.4580745079581515,0.5218902930158568,0.03228981831952227,0.24035364975370002,0.8610010795758454,0.15189965099971225,0.4500265799585518,0.5694002044255717,0.003632621458916341,0.20306922349100395,0.9102098256022507,0.037891299298755676,0.5803928519347061,0.6637840280683427,0.08643551715688323,0.36692278666604455,0.9013371904310331,0.1375483471381383,0.4028113876252423,0.6413450803292455,0.12719538977700293,0.2695104360310464,0.8259637162301766,0.014144563116801234,0.37667816303090906,0.5168969745415861,0.1682537963701513,0.33410865958173575,0.8484425867984974,0.058611698516067096,0.8315065879658412,0.2789729200992167,0.9945245995892753,0.24888929878837873,0.46190958353559053,0.6001068914944923,0.4423930882191558,0.5401960108402064,0.10094712790286253,0.2528337371603314,0.8799022340577852,0.008333391538230539,0.3912733680673015,0.6171166568363267,0.105837909658622,0.33150873466253455,0.975818138713478,0.07790329421209,0.5954187255222889,0.6448311546723651,0.1286438899409059,0.3670579086467788,0.9254664248663853,0.14677042469539237,0.3417922830057613,0.6008742102510921,0.16698751868740527,0.3652818243003961,0.9785659472811016,0.13657907390010013,0.3689822161609494,0.5266186395840643,0.07214149528669725,0.36716423995999425,0.9255534217042337,0.1252452917865572,0.44678829445792634,0.6595395104141705,0.14965307404474115,0.3070399628459542,0.8132100712444305,0.1473576657084501,0.322334999992252,0.6458670076078793,0.041043505416417304,0.39514701882055414,0.876512095446497,0.09580203281412521,0.9533940211635046,0.39282889261459586,0.8294850145753815,0.34864345147145814,0.5135523395738617,0.6060661014063642,0.5016004735965708,0.6351415313625548,0.05817129568587381,0.2929325706748629,0.8237005725403136,0.17873258523505406,
    // slan_400_56 s2 - T1
    //0.6301698347849004,0.11448725733350856,0.4731377833825171,0.726115359978413,0.18672913673247715,0.718142602668773,0.0849038378285028,0.16537042493440762,0.02476039222992912,0.04464779292140291,0.12548664448111788,0.18954178849140113,0.679336094930156,0.10931653612355126,0.4579218572663353,0.6676688357117553,0.26322527182400624,0.8163200327324932,0.6744795085451463,0.11255779499466463,0.44119174256386534,0.7141388458504104,0.21711237270152772,0.7599533993727364,0.7397988867459142,0.2148847420517342,0.5750274991146858,0.693190664733528,0.12361315565099243,0.8514281859130499,0.6977926200951612,0.23364317130687903,0.5146051880554768,0.6970621269272146,0.21887397542100367,0.7912410662602826,0.7889362190215875,0.2328304410949349,0.5402984042608847,0.7989643909199952,0.15691910641882983,0.8337305431768376,0.9461695286299766,0.03360967578130891,0.9058954419331311,0.15364659769450417,0.025868044403736846,0.9390949703133227,0.6161162602400277,0.20988798182880747,0.5638559675671483,0.6917631596770846,0.17175423306632495,0.8915462407927983,0.6352435456980741,0.14666721673617222,0.5178247007464511,0.6506140405077596,0.17385071457894508,0.890619585105019,0.7030982866141557,0.23524001648990026,0.5799066020115904,0.7811769776201716,0.17847578137825373,0.7207074187420648,0.12685791313714181,0.012449564323737517,0.01346952316860497,0.041752637089232894,0.03246063755441948,0.06801073044646869,0.6000466563802713,0.1202928736045193,0.40510017733322917,0.7421103481682718,0.15045155131141547,0.7728326879056565,0.769787385296923,0.19319789183198674,0.41717693231123315,0.7013953757364503,0.2657710756243121,0.7046191442090496,0.705651479008425,0.20863448517642286,0.5056218881876613,0.7794987545434504,0.1522230394458724,0.7334084069068673,0.7065184794985758,0.16593299900955247,0.562302249354719,0.7778943198119991,0.26366658866507464,0.745347898006317,0.6711125086709916,0.1055874150844129,0.4518348726535513,0.7934772614512007,0.28740424025524847,0.8910001262642666,0.6440924645992475,0.13934123268386345,0.5248132794875636,0.7760653290918935,0.2305956085682018,0.716955697290076,0.7819554275103446,0.25002809196609166,0.43570434366751476,0.6998775799796915,0.29433145779643166,0.7802773635735403,0.744959733126843,0.12540767345957288,0.5809704191466478,0.6719261463115811,0.2960611886894061,0.7700815024315005,
    };

    float value;
    if (fragmentLineID >= numTrajsArray || varID >= numVarsArray) {
        value = 1.0;
    } else {
        value = values[varID + fragmentLineID * numVarsArray];
    }

    if (scenario3) {
        if (fragmentLineID == 2 && varID == 4) {
            value = 0.8;
        }
        if (fragmentLineID == 2 && varID == 1) {
            value = 0.2;
        }
    }

    vec4 surfaceColorNew = transferFunctionArtificial(value, actualVarID);
    if (scenario2) {
        //surfaceColor = surfaceColorNew;
    } else if (scenario3) {
        if (fragmentLineID == 2 && (varID == 1 || varID == 4)) {
            surfaceColor = surfaceColorNew;
        }
    } else {
        surfaceColor = surfaceColorNew;
    }

    return surfaceColor;
}
#endif

#ifdef GL_FRAGMENT_SHADER
#define USE_SMOOTH_SEPARATOR
void drawSeparatorBetweenStripes(
        inout vec4 surfaceColor, in float varFraction, in float separatorWidth) {
#ifdef USE_SMOOTH_SEPARATOR
    separatorWidth = separatorWidth * 2.0 / 3.0f;
    if (varFraction > 0.5) { varFraction = 1.0 - varFraction; }
    float aaf = fwidth(varFraction);
    float alphaBorder = smoothstep(separatorWidth - aaf, separatorWidth + aaf, varFraction);
    surfaceColor.rgb = surfaceColor.rgb * alphaBorder;
#else
    float borderWidth = separatorWidth;
    float alphaBorder = 0.5;
    if (varFraction <= borderWidth || varFraction >= (1.0 - borderWidth))
    {
        if (varFraction > 0.5) { varFraction = 1.0 - varFraction; }
        surfaceColor.rgb = surfaceColor.rgb * (alphaBorder + (1 - alphaBorder) * varFraction / borderWidth);
    }
#endif
}
#endif


///////////////////////////////////////////
// Phong lighting model

uniform vec3 lightDirection; // light direction in world space
uniform int useHeadLight;
uniform float materialAmbient;
uniform float materialDiffuse;
uniform float materialSpecular;
uniform float materialSpecularExp;
uniform bool drawHalo;
uniform float haloFactor;

vec4 computePhongLighting(
        in vec4 surfaceColor, in float occlusionFactor, in float shadowFactor,
        in vec3 worldPos, in vec3 normal, in vec3 tangent) {
    const vec3 ambientColor = surfaceColor.rgb;
    const vec3 diffuseColor = surfaceColor.rgb;

    const float kA = materialAmbient * occlusionFactor * shadowFactor;
    const vec3 Ia = kA * ambientColor;
    const float kD = materialDiffuse;
    const float kS = materialSpecular;
    const float s = materialSpecularExp;

    const vec3 n = normalize(normal);
    const vec3 v = normalize(cameraPosition - worldPos);
    const vec3 l = normalize(useHeadLight == 1 ? v : -lightDirection);
    const vec3 h = normalize(v + l);
    vec3 t = normalize(tangent);

    vec3 helperVec = normalize(cross(t, l));
    vec3 newL = normalize(cross(helperVec, t));

    const float exponent = 1.7;
    float cosNormal1 = pow(clamp(abs(dot(n, l)), 0.0, 1.0), exponent);
    float cosNormal2 = pow(clamp(abs(dot(n, newL)), 0.0, 1.0), exponent);
    float cosNormalCombined = 0.3 * cosNormal1 + 0.7 * cosNormal2;
    if (dot(n, l) < 0.0) {
        cosNormalCombined = 0.0;
    }

    const vec3 lightColor = vec3(1.0);
    vec3 Id = kD * cosNormalCombined * diffuseColor;
    vec3 Is = kS * pow(clamp(abs(dot(n, h)), 0.0, 1.0), s) * diffuseColor;
    //vec3 Id = kD * clamp((dot(n, l)), 0.0, 1.0) * diffuseColor;
    //vec3 Is = kS * pow(clamp((dot(n, h)), 0.0, 1.0), s) * diffuseColor;

    vec3 colorShading = Ia + Id + Is;

    if (drawHalo) {
        /*vec3 hV = normalize(cross(t, v));
        vec3 vNew = normalize(cross(hV, t));

        float angle = pow(abs((dot(vNew, n))), haloFactor); // 1.8 + 1.5
        float angleN = pow(abs((dot(v, n))), haloFactor);

        float haloNew = min(1.0, mix(1.0f, angle + angleN, 0.9)) * 0.9 + 0.1;
        colorShading *= (haloNew) * (haloNew);*/

        vec3 helperVec = normalize(cross(t, v));
        vec3 newV = normalize(cross(helperVec, t));
        // Get the symmetric ribbon position (ribbon direction is perpendicular to line direction) between 0 and 1.
        // NOTE: len(cross(a, b)) == area of parallelogram spanned by a and b.
        vec3 crossProdVn = cross(newV, n);
        float ribbonPosition = length(crossProdVn);

        float haloWidth = haloFactor * separatorWidth / float(numVariables);
        colorShading *= 1.0 - smoothstep(1.0 - haloWidth - fwidth(ribbonPosition), 1.0 - haloWidth, ribbonPosition);
    }

    return vec4(colorShading.rgb, surfaceColor.a);
}

vec4 computePhongLightingSphere(
        in vec4 surfaceColor, in float occlusionFactor, in float shadowFactor,
        in vec3 worldPos, in vec3 normal, in float bandPos, in float separatorWidth) {
    const vec3 ambientColor = surfaceColor.rgb;
    const vec3 diffuseColor = surfaceColor.rgb;

    const float kA = materialAmbient * occlusionFactor * shadowFactor;
    const vec3 Ia = kA * ambientColor;
    const float kD = materialDiffuse;
    const float kS = materialSpecular;
    const float s = materialSpecularExp;

    const vec3 n = normalize(normal);
    const vec3 v = normalize(cameraPosition - worldPos);
    const vec3 l = normalize(useHeadLight == 1 ? v : -lightDirection);
    const vec3 h = normalize(v + l);

    vec3 Id = kD * clamp((dot(n, l)), 0.0, 1.0) * diffuseColor;
    vec3 Is = kS * pow(clamp((dot(n, h)), 0.0, 1.0), s) * diffuseColor;
    vec3 colorShading = Ia + Id + Is;

    if (drawHalo) {
        colorShading *= 1.0 - smoothstep(1.0 - separatorWidth - fwidth(bandPos), 1.0 - separatorWidth, bandPos);
    }

    return vec4(colorShading.rgb, surfaceColor.a);
}
